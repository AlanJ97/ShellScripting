
#BASIC SINTAX
awk [OPTIONS] FILE

#PRINT CONTENT OF A FILE
awk 'BEGIN {} {print}' marks.txt

#PRINT CONTENT OF A FILE WITH HEADERS
awk 'BEGIN{printf "Sr No\tName\tSub\tMarks\n"} {print}' marks.txt

#BASIC SINTAX OF HOW TO USE A FILE WITH INSTRUCTIONS AS THE PURE INSTRUCTONS ON THE COMMAND LINE
awk [options] -f file ....

#READ CONTENT OF A FILE WITH A FILE AS INSTRUCTION
awk -f command.awk marks.txt

---------------------------
#AWK STANDARD OPTIONS

#-v option -> It assigns values to a variable before the program execution
awk -v name=Jerry 'BEGIN{printf "Name = %s\n", name}'

#--dump-variables[=file] option -> It prints a sorted list of global variables and their final 
#values to file. The default file is awkvars.out.
awk --dump-variables ''
cat awkvars.out 

#--help option -> This option prints the help message on standard output.
awk --help

#--lint[=fatal] option ->This option enables checking of non-portable or dubious constructs. 
#When an argument fatal is provided, it treats warning messages as errors. 

#--posix option -> This option turns on strict POSIX compatibility, in which all 
#common and gawk-specific extensions are disabled.
SIN EJEMPLO

#--profile[=file] option -> This option generates a pretty-printed version of the program 
#in file. Default file is awkprof.out. 
awk --profile 'BEGIN{printf"---|Header|--\n"} {print} END{printf"---|Footer|---\n"}' marks.txt > /dev/null 

#--traditional option -> This option disables all gawk-specific extensions.
SIN EJEMPLO

#--version option -> This option displays the version information of the AWK program.
awk --version

-------------------

#PRINTING ONE COLUMN OR FIELD
#"\t" -> this alignsthe text
awk '{print $3 "\t" $4}' marks.txt

#PRINTING ALL LINES
#/a/ -> this is like an if statement, if the thing that we're looking for exists
# it gets the searched thing, otherwise, it shows everything
awk '/a/ {print $0}' marks.txt
awk '/a/' marks.txt -> as this sentence has no cryteria to look for, it prints everything

#PRINTING COLUMNS IN ANY ORDER
awk '/a/ {print $4 "\t" $3}' marks.txt

#CONTING AND PRINTING MATCHED PATTERN
awk '/a/{++cnt} END {print "Count = ", cnt}' marks.txt

#PRINTING LINES THAT CONTAIN MORE THAN 18 CHARACTERS
awk 'length($0) > 18' marks.txt

----------------
#standard awk variables
#ARGC -> It implies the number of arguments provided at the command line.
#It shows arguments because, it is also ounting 'awk' at the beginning
awk 'BEGIN {print "Arguments =", ARGC}' One Two Three Four

#CONVFMT
#It represents the conversion format for numbers. Its default value is %.6g.
awk 'BEGIN { print "Conversion Format =", CONVFMT }'

#ENVIRON
#It is an associative array of environment variables.
awk 'BEGIN { print ENVIRON["USER"] }'

#FILENAME
#It represents the current file name.
awk 'END {print FILENAME}' marks.txt

#FS
#It represents the (input) field separator and its default value is space.
#You can also change this by using -F command line option.
awk 'BEGIN {print "FS = " FS}' | cat -vte

#NF
#It represents the number of fields in the current record. For instance,
#the following example prints only those lines that contain more than two fields.


#NR
#It represents the number of the current record. For instance, 
#the following example prints the record if the current record number is less than three.
echo -e "One Two\nOne Two Three\nOne Two Three Four" | awk 'NR < 3'

#FNR
#It is similar to NR, but relative to the current file. It is useful when AWK is operating
#on multiple files. Value of FNR resets with new file.
SIN EJEMPLO

#OFMT
#It represents the output format number and its default value is %.6g.
awk 'BEGIN {print "OFMT = " OFMT}'

#OFS
#It represents the output field separator and its default value is space.
awk 'BEGIN {print "OFS = " OFS}' | cat -vte

#ORS
#It represents the output record separator and its default value is newline.
awk 'BEGIN {print "ORS = " ORS}' | cat -vte

#RLENGTH
#It represents the length of the string matched by match function. 
#AWK's match function searches for a given string in the input-string.
awk 'BEGIN { if (match("One Two Three", "re")) { print RLENGTH } }'

#RS
#It represents (input) record separator and its default value is newline.
awk 'BEGIN {print "RS = " RS}' | cat -vte

#RSTART
#It represents the first position in the string matched by match function.
awk 'BEGIN { if (match("One Two Three", "Thre")) { print RSTART } }'

#SUBSEP
#It represents the separator character for array subscripts and its default value is \034.
awk 'BEGIN { print "SUBSEP = " SUBSEP }' | cat -vte

#$0
#It represents the entire input record.
awk '{print $0}' marks.txt

#$n
#It represents the nth field in the current record where the fields are separated by FS.
awk '{print $3 "\t" $4}' marks.txt

---------------------

GNU AWK Specific Variables
---------------------
#ARGIND
#It represents the index in ARGV of the current file being processed.
awk '{ 
   print "ARGIND   = ", ARGIND; print "Filename = ", ARGV[ARGIND] 
}' junk1 junk2 junk3

#BINMODE
#It is used to specify binary mode for all file I/O on non-POSIX systems. 
#Numeric values of 1, 2, or 3 specify that input files, output files, or all files,
#respectively, should use binary I/O. String values of r or w specify that input 
#files or output files, respectively, should use binary I/O. String values of rw or 
#wr specify that all files should use binary I/O.
SIN EJEMPLO

#ERRNO
#A string indicates an error when a redirection fails for getline or if close call fails.
awk 'BEGIN { ret = getline < "junk.txt"; if (ret == -1) print "Error:", ERRNO }'

#FIELDWIDTHS
#A space separated list of field widths variable is set, GAWK parses the input into fields of 
#fixed width, instead of using the value of the FS variable as the field separator.
awk 'BEGIN{IGNORECASE = 1} /amit/' marks.txt

#FIELDWIDTHS
#A space separated list of field widths variable is set, GAWK parses the input into fields of 
#fixed width, instead of using the value of the FS variable as the field separator.
SIN EJEMPLO

#IGNORECASE
#When this variable is set, GAWK becomes case-insensitive. 
awk 'BEGIN{IGNORECASE = 1} /amit/' marks.txt

#LINT
#It provides dynamic control of the --lint option from the GAWK program. When this variable 
#is set, GAWK prints lint warnings. When assigned the string value fatal, lint warnings
#become fatal errors, exactly like --lint=fat
awk 'BEGIN {LINT = 1; a}'

#PROCINFO
#This is an associative array containing information about the process, 
#such as real and effective UID numbers, process ID number, and so on.
awk 'BEGIN { print PROCINFO["pid"] }'

#TEXTDOMAIN
#It represents the text domain of the AWK program. It is used to find the 
#localized translations for the program's strings.
awk 'BEGIN { print TEXTDOMAIN }'

---------------

Arithmetic Operators
----------------

#Addition
#It is represented by plus (+) symbol which adds two or more numbers.
awk 'BEGIN { a = 50; b = 20; print "(a + b) = ", (a + b) }'

#Subtraction
#It is represented by minus (-) symbol which subtracts two or more numbers.
awk 'BEGIN { a = 50; b = 20; print "(a - b) = ", (a - b) }'

#Multiplication
#It is represented by asterisk (*) symbol which multiplies two or more numbers. 
awk 'BEGIN { a = 50; b = 20; print "(a * b) = ", (a * b) }'

#Division
#It is represented by slash (/) symbol which divides two or more numbers. 
awk 'BEGIN { a = 50; b = 20; print "(a / b) = ", (a / b) }'

#Modulus
#It is represented by percent (%) symbol which finds the Modulus division of 
#two or more numbers. 

----------------

IMCREMENT AND DECREMENT 
------------------

#Pre-Increment
#It is represented by ++. It increments the value of an operand by 1. 
#This operator first increments the value of the operand, 
#then returns the incremented value. For instance, in the following example,
#this operator sets the value of both the operands, a and b, to 11.
awk 'BEGIN { a = 10; b = ++a; printf "a = %d, b = %d\n", a, b }'

#Pre-Decrement
#It is represented by --. It decrements the value of an operand by 1. 
#This operator first decrements the value of the operand,
#then returns the decremented value. For instance, in the following example,3
#this operator sets the value of both the operands, a and b, to 9.
awk 'BEGIN { a = 10; b = --a; printf "a = %d, b = %d\n", a, b }'

#Post-Increment
#It is represented by ++. It increments the value of an operand by 1.
#This operator first returns the value of the operand, then it increments 
#its value. For instance, the following code sets the value of operand a to 11 and b to 10.
awk 'BEGIN { a = 10; b = a++; printf "a = %d, b = %d\n", a, b }'

#Post-Decrement
#It is represented by --. It decrements the value of an operand by 1. 
#This operator first returns the value of the operand, 
#then it decrements its value. For instance, the following 
#code sets the value of the operand a to 9 and b to 10.
awk 'BEGIN { a = 10; b = a--; printf "a = %d, b = %d\n", a, b }'

------------------

Assignment Operators

#Simple Assignment
#It is represented by =.
awk 'BEGIN { name = "Jerry"; print "My name is", name }'

#Shorthand Addition
#It is represented by +=.
awk 'BEGIN { cnt = 10; cnt += 10; print "Counter =", cnt }'

#Shorthand Subtraction
#It is represented by -=
awk 'BEGIN { cnt = 100; cnt -= 10; print "Counter =", cnt }'

#Shorthand Multiplication
#It is represented by *=.
awk 'BEGIN { cnt = 10; cnt *= 10; print "Counter =", cnt }'

#Shorthand Division
#It is represented by /=. 
awk 'BEGIN { cnt = 100; cnt /= 5; print "Counter =", cnt }'

#Shorthand Modulo
#It is represented by %=.
awk 'BEGIN { cnt = 100; cnt %= 8; print "Counter =", cnt }'

#Shorthand Exponential
#It is represented by ^=.
awk 'BEGIN { cnt = 2; cnt ^= 4; print "Counter =", cnt }'


#Shorthand Exponential
#It is represented by **=.
awk 'BEGIN { cnt = 2; cnt **= 4; print "Counter =", cnt }'

---------------------

RELATIONAL OPERATORS
----------------------
#Equal to
#It is represented by ==. It returns true if both operands are equal, 
#otherwise it returns false.
awk 'BEGIN { a = 10; b = 10; if (a == b) print "a == b" }'

#Not Equal to
#It is represented by !=. It returns true if both operands are unequal,
#otherwise it returns false.
awk 'BEGIN { a = 10; b = 20; if (a != b) print "a != b" }'

#Less Than
#It is represented by <. It returns true if the left-side operand is less 
#than the right-side operand; otherwise it returns false.
awk 'BEGIN { a = 10; b = 20; if (a < b) print "a  < b" }'

#Less Than or Equal to
#It is represented by <=. It returns true if the left-side operand is 
#less than or equal to the right-side operand; otherwise it returns false.
awk 'BEGIN { a = 10; b = 10; if (a <= b) print "a <= b" }'

#Greater Than
#It is represented by >. It returns true if the left-side operand is greater
#than the right-side operand, otherwise it returns false.
awk 'BEGIN { a = 10; b = 20; if (b > a ) print "b > a" }'

#Greater Than or Equal to
#It is represented by >=. It returns true if the left-side operand is 
#greater than or equal to the right-side operand; otherwise it returns false.
awk 'BEGIN { a = 100; b = 20; if (a > b) print "a  > b" }'
------------

LOGICAL OPERATORS
--------------

#Logical AND
#It is represented by &&. Its syntax is as follows 
#expr1 && expr2
#It evaluates to true if both expr1 and expr2 evaluate to true; 
#otherwise it returns false. expr2 is evaluated if and only if expr1 evaluates to true. 
 awk 'BEGIN {
   num = 5; if (num >= 0 && num <= 7) printf "%d is in octal format\n", num 
}'

#Logical OR
#It is represented by ||. The syntax of Logical OR is
#expr1 || expr2
#It evaluates to true if either expr1 or expr2 evaluates to true; 
#otherwise it returns false. expr2 is evaluated if and only if expr1 evaluates to false. 
#The following example demonstrates this −
awk 'BEGIN {
   ch = "\n"; if (ch == " " || ch == "\t" || ch == "\n") 
   print "Current character is whitespace." 
}'

#Logical NOT
#It is represented by exclamation mark (!). The following example demonstrates this
#! expr1
#It returns the logical compliment of expr1. If expr1 evaluates to true, it returns 0;
#otherwise it returns 1. For instance, the following example checks 
#whether a string is empty or not.
awk 'BEGIN { name = ""; if (! length(name)) print "name is empty string." }'

----------------

TERNARY OPERATORS 
---------------------
#We can easily implement a condition expression using ternary operator.
#The following example demonstrates this
#condition expression ? statement1 : statement2
#When the condition expression returns true, statement1 gets executed;
#otherwise statement2 is executed.
awk 'BEGIN { a = 10; b = 20; (a > b) ? max = a : max = b; print "Max =", max}'

------------

UNARY OPERATORS
---------------
#Unary Plus
#It is represented by +. It multiplies a single operand by +1.
awk 'BEGIN { a = -10; a = +a; print "a =", a }'

#Unary Minus
#It is represented by -. It multiplies a single operand by -1.
awk 'BEGIN { a = -10; a = -a; print "a =", a }'
-------------------

EXPONENTIAL OPERATORS
-------------------
#Exponential Format 1
#It is an exponential operator that raises the value of an operand. 
#For instance, the following example raises the value of 10 by 2.
awk 'BEGIN { a = 10; a = a ^ 2; print "a =", a }'

#Exponential Format 2
#It is an exponential operator that raises the value of an operand. 
#For instance, the following example raises the value of 10 by 2.
awk 'BEGIN { a = 10; a = a**2; print "a =", a }'

--------------------------

#STRING CONCANETATION OPERATOR
#Space is a string concatenation operator that merges two strings. 
#The following example demonstrates this −
awk 'BEGIN { str1 = "Hello, "; str2 = "World"; str3 = str1 str2; print str3 }'

---------------------------------

ARRAY MEMBERSHIP OPERATOR
-------------------
#It is represented by in. It is used while accessing array elements.
#The following example prints array elements using this operator.
awk 'BEGIN { 
   arr[0] = 1; arr[1] = 2; arr[2] = 3; for (i in arr) printf "arr[%d] = %d\n", i, arr[i]
}'

--------------------

REGULAR EXPRESSION OPERATOR
----------------------------
#Match
#It is represented as ~. It looks for a field that contains the match string. For instance,
#the following example prints the lines that contain the pattern 9.
awk '$0 ~ 9' marks.txt

#Not Match
#It is represented as !~. It looks for a field that does not contain the match string. 
#For instance, the following example prints the lines that do not contain the pattern 9.
awk '$0 !~ 9' marks.txt

#Dot
#It matches any single character except the end of line character.
#For instance, the following example matches fin, fun, fan etc.
echo -e "cat\nbat\nfun\nfin\nfan" | awk '/f.n/'

#Start of line
#It matches the start of line. 
#For instance, the following example prints all the lines that start with pattern The.
echo -e "This\nThat\nThere\nTheir\nthese" | awk '/^The/'

#End of line
#It matches the end of line. For instance, the following example prints the lines 
#that end with the letter n.
echo -e "knife\nknow\nfun\nfin\nfan\nnine" | awk '/n$/'

#Match character set
#It is used to match only one out of several characters.
#For instance, the following example matches pattern Call and Tall but not Ball.
echo -e "Call\nTall\nBall" | awk '/[CT]all/'

#Exclusive set
#In exclusive set, the carat negates the set of characters in the square brackets. 
#For instance, the following example prints only Ball.
echo -e "Call\nTall\nBall" | awk '/[^CT]all/'

#Alteration
#A vertical bar allows regular expressions to be logically ORed. 
#For instance, the following example prints Ball and Call.
echo -e "Call\nTall\nBall\nSmall\nShall" | awk '/Call|Ball/'


#Zero or One Occurrence
#It matches zero or one occurrence of the preceding character. 
#For instance, the following example matches Colour as well as Color.
#We have made u as an optional character by using ?.
echo -e "Colour\nColor" | awk '/Colou?r/'

#Zero or More Occurrence
#It matches zero or more occurrences of the preceding character. 
#For instance, the following example matches ca, cat, catt, and so on.
echo -e "ca\ncat\ncatt" | awk '/cat*/'

#One or More Occurrence
#It matches one or more occurrence of the preceding character. 
#For instance below example matches one or more occurrences of the 2.
echo -e "111\n22\n123\n234\n456\n222"  | awk '/2+/'

#Grouping
#Parentheses () are used for grouping and the character | is used for alternatives. 
#For instance, the following regular expression matches the lines containing 
#either Apple Juice or Apple Cake.
echo -e "Apple Juice\nApple Pie\nApple Tart\nApple Cake" | awk '/Apple (Juice|Cake)/'

----------------------

ARRAYS

--------------------------
#AWK has associative arrays and one of the best thing about it is – the indexes need 
#not to be continuous set of number; you can use either string or number as an array index. 
#Also, there is no need to declare the size of an array in advance – 
#arrays can expand/shrink at runtime.

#Its syntax is as follows −
#array_name[index] = value

#Where array_name is the name of array, index is the array index, 
#and value is any value assigning to the element of the array

#Creating Array
awk 'BEGIN {
   fruits["mango"] = "yellow";
   fruits["orange"] = "orange"
   print fruits["orange"] "\n" fruits["mango"]
}'

#Deleting Array Elements
#For insertion, we used assignment operator. 
#Similarly, we can use delete statement to remove an element from the array. 
#delete array_name[index]
awk 'BEGIN {
   fruits["mango"] = "yellow";
   fruits["orange"] = "orange";
   delete fruits["orange"];
   print fruits["orange"]
}'

#Multi-Dimensional arrays
#AWK only supports one-dimensional arrays. But you can easily simulate a multi-dimensional 
#array using the one-dimensional array itself.

#For instance, given below is a 3x3 two-dimensional array −
#100   200   300
#400   500   600
#700   800   900

#In the above example, array[0][0] stores 100, array[0][1] stores 200, and so on.
#To store 100 at array location [0][0], we can use the following syntax −
#Syntax
#array["0,0"] = 100

#Though we gave 0,0 as index, these are not two indexes. 
#In reality, it is just one index with the string 0,0.

#The following example simulates a 2-D array −
#awk 'BEGIN {
#   array["0,0"] = 100;
#   array["0,1"] = 200;
#   array["0,2"] = 300;
#   array["1,0"] = 400;
#   array["1,1"] = 500;
#   array["1,2"] = 600;
#
#   # print array elements
#   print "array[0,0] = " array["0,0"];
#   print "array[0,1] = " array["0,1"];
#   print "array[0,2] = " array["0,2"];
#   print "array[1,0] = " array["1,0"];
#   print "array[1,1] = " array["1,1"];
#   print "array[1,2] = " array["1,2"];
#}'

---------------------


CONTROL FLOW
---------------------

#If statement
#It simply tests the condition and performs certain actions depending upon the condition.
#Given below is the syntax of if statement −

#Syntax
#if (condition)
#   action

#We can also use a pair of curly braces as given below to execute multiple actions −
#Syntax
#if (condition) {
#   action-1
#   action-1
#   .
#   .
#   action-n
#}

#If Else Statement
#In if-else syntax, we can provide a list of actions to be performed when a condition becomes false.
#The syntax of if-else statement is as follows −
#if (condition)
#   action-1
#else
#   action-2
'BEGIN {
   num = 11; if (num % 2 == 0) printf "%d is even number.\n", num; 
             else printf "%d is odd number.\n", num 
}'

#If-Else-If Ladder
#We can easily create an if-else-if ladder by using multiple if-else statements. 
#The following example demonstrates this −
#awk 'BEGIN {
#   a = 30;
  
#   if (a==10)
#   print "a = 10";
#   else if (a == 20)
#   print "a = 20";
#  else if (a == 30)
#   print "a = 30";
#}'

------------------------

LOOPS
-------------------------------

#For Loop
#The syntax of for loop is −
#for (initialization; condition; increment/decrement)
#  action

#Initially, the for statement performs initialization action, then it checks the condition. 
#If the condition is true, it executes actions, thereafter it performs increment or 
#decrement operation. The loop execution continues as long as the condition is true.
#For instance, the following example prints 1 to 5 using for loop −
awk 'BEGIN { for (i = 1; i <= 5; ++i) print i }'

#While Loop
#The while loop keeps executing the action until a particular logical condition evaluates to true. 
#Here is the syntax of while loop −
#while (condition)
#  action

#AWK first checks the condition; if the condition is true, it executes the action. 
#This process repeats as long as the loop condition evaluates to true. 
#For instance, the following example prints 1 to 5 using while loop −
awk 'BEGIN {i = 1; while (i < 6) { print i; ++i } }'

#Do-While Loop
#The do-while loop is similar to the while loop, except that the test condition
#is evaluated at the end of the loop. Here is the syntax of do-whileloop −
#do
#   action
#while (condition)
#In a do-while loop, the action statement gets executed at least once even when the condition statement evaluates to false. 
#For instance, the following example prints 1 to 5 numbers using do-while loop −
awk 'BEGIN {i = 1; do { print i; ++i } while (i < 6) }'

#Break Statement
#As its name suggests, it is used to end the loop execution. 
#Here is an example which ends the loop when the sum becomes greater than 50.
awk 'BEGIN {
   sum = 0; for (i = 0; i < 20; ++i) { 
      sum += i; if (sum > 50) break; else print "Sum =", sum 
   } 
}'

#Continue Statement
#The continue statement is used inside a loop to skip to the next iteration of the loop.
#It is useful when you wish to skip the processing of some data inside the loop.
#For instance, the following example uses continue statement to print
#the even numbers between 1 to 20.
awk 'BEGIN {
   for (i = 1; i <= 20; ++i) {
      if (i % 2 == 0) print i ; else continue
   } 
}'

#Exit Statement
#It is used to stop the execution of the script. It accepts an integer as an argument 
#which is the exit status code for AWK process. If no argument is supplied,
#exit returns status zero. Here is an example that stops the execution when 
#the sum becomes greater than 50.
awk 'BEGIN {
   sum = 0; for (i = 0; i < 20; ++i) {
      sum += i; if (sum > 50) exit(10); else print "Sum =", sum 
   } 
}'
echo $?
------------------------

ARITHMETIC FUNCTIONS
------------------
#atan2(y, x)
#It returns the arctangent of (y/x) in radians.
#awk 'BEGIN {
#   PI = 3.14159265
#   x = -10
#   y = 10
#   result = atan2 (y,x) * 180 / PI;
   
#   printf "The arc tangent for (x=%f, y=%f) is %f degrees\n", x, y, result
#}'

#cos(expr)
#This function returns the cosine of expr, which is expressed in radians. 
#awk 'BEGIN {
#   PI = 3.14159265
#   param = 60
#   result = cos(param * PI / 180.0);
#   printf "The cosine of %f degrees is %f.\n", param, result
#}'

#exp(expr)
#This function is used to find the exponential value of a variable.
#awk 'BEGIN {
#   param = 5
#   result = exp(param);  
#   printf "The exponential value of %f is %f.\n", param, result
#}'

#int(expr)
#This function truncates the expr to an integer value.
#awk 'BEGIN {
#   param = 5.12345
#   result = int(param)   
#   print "Truncated value =", result
#}'

#log(expr)
#This function calculates the natural logarithm of a variable.
#awk 'BEGIN {
#  param = 5.5
#   result = log (param)  
#   printf "log(%f) = %f\n", param, result
#}'

#rand
#This function returns a random number N, between 0 and 1, such that 0 <= N < 1. 
#For instance, the following example generates three random numbers
#awk 'BEGIN {
#   print "Random num1 =" , rand()
#   print "Random num2 =" , rand()
#   print "Random num3 =" , rand()
#}'

#sin(expr)
#This function returns the sine of expr, which is expressed in radians. 
awk 'BEGIN {
   PI = 3.14159265
   param = 30.0
   result = sin(param * PI /180)
   printf "The sine of %f degrees is %f.\n", param, result
}'

#sqrt(expr)
#This function returns the square root of expr.

#srand([expr])
#This function generates a random number using seed value. It uses expr as the new 
#seed for the random number generator. In the absence of expr, it uses 
#the time of day as the seed value.
awk 'BEGIN {
   param = 10
   
   printf "srand() = %d\n", srand()
   printf "srand(%d) = %d\n", param, srand(param)
}'

------------------------------------------------

STRING FUNCTIONS
-------------------------
#asort(arr [, d [, how] ])
#This function sorts the contents of arr using GAWK's normal rules for comparing values,
#and replaces the indexes of the sorted values arr with sequential integers starting with 1.
awk 'BEGIN {
   arr[0] = "Three"
   arr[1] = "One"
   arr[2] = "Two"
   print "Array elements before sorting:"
   
   for (i in arr) {
      print arr[i]
   }
   asort(arr)
   print "Array elements after sorting:"
   
   for (i in arr) {
      print arr[i]
   }
}'

#asorti(arr [, d [, how] ])
#The behavior of this function is the same as that of asort(), except that the 
#array indexes are used for sorting.
awk 'BEGIN {
   arr["Two"] = 1
   arr["One"] = 2
   arr["Three"] = 3
   asorti(arr)
   print "Array indices after sorting:"
   
   for (i in arr) {
      print arr[i]
   }
}'

#gsub(regex, sub, string)
#gsub stands for global substitution. It replaces every occurrence of regex with 
#the given string (sub). The third parameter is optional. If it is omitted, then $0 is used.
awk 'BEGIN {
   str = "Hello, World"
   print "String before replacement = " str
   
   gsub("World", "Jerry", str)
   print "String after replacement = " str
}'

#index(str, sub)
#It checks whether sub is a substring of str or not. On success, it returns the position where sub starts; 
#otherwise it returns 0. The first character of str is at position 1.
awk 'BEGIN {
   str = "One Two Three"
   subs = "Two"
   ret = index(str, subs)
   
   printf "Substring \"%s\" found at %d location.\n", subs, ret
}'

#length(str)
#It returns the length of a string.
awk 'BEGIN {
   str = "Hello, World !!!"
   print "Length = ", length(str)
}'

#match(str, regex)
#It returns the index of the first longest match of regex in string str. 
#It returns 0 if no match found.
awk 'BEGIN {
   str = "One Two Three"
   subs = "Two"
   ret = match(str, subs)
  
   printf "Substring \"%s\" found at %d location.\n", subs, ret
}'

#split(str, arr, regex)
#This function splits the string str into fields by regular expression regex and the 
#fields are loaded into the array arr. If regex is omitted, then FS is used.
awk 'BEGIN {
   str = "One,Two,Three,Four"
   split(str, arr, ",")
   print "Array contains following values"
   
   for (i in arr) {
      print arr[i]
   }
}'

#printf(format, expr-list)
#This function returns a string constructed from expr-list according to format.
awk 'BEGIN {
   param = 1024.0
   result = sqrt(param)
   
   printf "sqrt(%f) = %f\n", param, result
}'


#strtonum(str)
#This function examines str and return its numeric value. If str begins with a 
#leading 0, it is treated as an octal number. If str begins with a leading 0x or 0X, 
#it is taken as a hexadecimal number. Otherwise, assume it is a decimal numbe
awk 'BEGIN {
   print "Decimal num = " strtonum("123")
   print "Octal num = " strtonum("0123")
   print "Hexadecimal num = " strtonum("0x123")
}'

#sub(regex, sub, string)
#This function performs a single substitution. It replaces the first occurrence 
#of the regex pattern with the given string (sub). The third parameter is optional. 
#If it is omitted, $0 is used.
awk 'BEGIN {
   str = "Hello, World"
   print "String before replacement = " str
   
   sub("World", "Jerry", str)
   print "String after replacement = " str
}'


#substr(str, start, l)
#This function returns the substring of string str, starting at index start of length l. 
#If length is omitted, the suffix of str starting at index start is returned.
 awk 'BEGIN {
   str = "Hello, World !!!"
   subs = substr(str, 1, 5)

   print "Substring = " subs
}'


#tolower(str)
#This function returns a copy of string str with all upper-case characters converted
#to lower-case.
awk 'BEGIN {
   str = "HELLO, WORLD !!!"
   print "Lowercase string = " tolower(str)
}'


#toupper(str)
#This function returns a copy of string str with all lower-case characters 
#converted to upper case.
awk 'BEGIN {
   str = "hello, world !!!"
   print "Uppercase string = " toupper(str)
}'
----------------------------

TIME FUNCTIONS